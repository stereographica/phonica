name: Test & Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"
        run: npm ci

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
        run: npm test -- --coverage --watchAll=false --silent

      - name: Test development server startup
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          timeout 30s npm run dev &
          DEV_PID=$!
          sleep 15
          # Check if process is still running
          if kill -0 $DEV_PID 2>/dev/null; then
            echo "‚úÖ Development server started successfully"
            kill $DEV_PID
          else
            echo "‚ùå Development server failed to start"
            exit 1
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Comment coverage report
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.4.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

      - name: Check coverage thresholds
        run: |
          node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const total = coverage.total;
            
            console.log('üìä „ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏ÁµêÊûú:');
            console.log('- Statements:', total.statements.pct + '%');
            console.log('- Branches:', total.branches.pct + '%');
            console.log('- Functions:', total.functions.pct + '%');
            console.log('- Lines:', total.lines.pct + '%');
            
            // ÊúÄ‰ΩéÈôê„ÅÆ„Ç´„Éê„É¨„ÉÉ„Ç∏ÈñæÂÄ§
            const minCoverage = 80;
            
            if (total.statements.pct < minCoverage || 
                total.branches.pct < minCoverage || 
                total.functions.pct < minCoverage || 
                total.lines.pct < minCoverage) {
              console.log('‚ùå „Ç´„Éê„É¨„ÉÉ„Ç∏„ÅåÈñæÂÄ§(' + minCoverage + '%)„Çí‰∏ãÂõû„Å£„Å¶„ÅÑ„Åæ„Åô');
              process.exit(1);
            } else {
              console.log('‚úÖ „Ç´„Éê„É¨„ÉÉ„Ç∏Ë¶Å‰ª∂„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Åæ„Åô');
            }
          "

  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: test
    permissions:
      contents: read
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    name: E2E Tests (${{ matrix.browser }})

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: Generate test audio files
        run: |
          # Create uploads directory
          mkdir -p public/uploads
          
          # Generate silent audio files for testing (5 second duration each)
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/hot-spring.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/forest-morning.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/mountain-stream.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/shinjuku-station.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/rainy-street.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/ocean-waves-dawn.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/london-underground.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/tropical-rainforest.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/cafe-afternoon.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/arctic-wind.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/sakura-blizzard.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/desert-night.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/kyoto-temple.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/mumbai-market.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/thunderstorm.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/autumn-leaves.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/nyc-subway.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/whale-songs.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/summer-festival.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/ice-cave.wav
          ffmpeg -f lavfi -i "sine=frequency=440:duration=5" -ar 44100 -ac 1 -y public/uploads/savanna-dawn.wav
          
          echo "‚úÖ Generated test audio files:"
          ls -la public/uploads/
          
          # „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅÆÁ¢∫Ë™çÔºà0„Éê„Ç§„Éà„Åß„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™çÔºâ
          for file in public/uploads/*.wav; do
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
            echo "  - $(basename "$file"): ${size} bytes"
          done

      - name: Run E2E tests - ${{ matrix.browser }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          CI: true
        run: |
          # FirefoxÂ∞ÇÁî®„ÅÆ„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÂª∂Èï∑Ë®≠ÂÆö
          if [ "${{ matrix.browser }}" = "firefox" ]; then
            echo "ü¶ä Firefox detected: Using extended timeout (20 minutes)"
            timeout 1200s npm run e2e:ci -- --project=${{ matrix.browser }} --workers=1 --reporter=dot || {
              EXIT_CODE=$?
              echo "‚ùå Firefox E2E tests exited with code: $EXIT_CODE"
              if [ $EXIT_CODE -eq 124 ]; then
                echo "‚è±Ô∏è Firefox tests timed out after 20 minutes"
              fi
              exit $EXIT_CODE
            }
          else
            npm run e2e:ci -- --project=${{ matrix.browser }} --workers=1 --reporter=dot
          fi

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

  e2e-summary:
    runs-on: ubuntu-latest
    needs: e2e
    if: always() && github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Comment E2E test results
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            const e2eJobs = jobs.data.jobs.filter(job => job.name.startsWith('E2E Tests'));
            const results = e2eJobs.map(job => {
              const browser = job.name.match(/\((.+)\)/)?.[1] || 'Unknown';
              const status = job.conclusion === 'success' ? '‚úÖ' : '‚ùå';
              return `- ${browser}: ${status}`;
            }).join('\n');
            
            const overallStatus = e2eJobs.every(job => job.conclusion === 'success') 
              ? '‚úÖ „Åô„Åπ„Å¶„ÅÆE2E„ÉÜ„Çπ„Éà„ÅåÊàêÂäü„Åó„Åæ„Åó„Åü' 
              : '‚ùå ‰∏ÄÈÉ®„ÅÆE2E„ÉÜ„Çπ„Éà„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü';

            // PR„ÅÆÂ†¥Âêà„ÅÆ„Åø„Ç≥„É°„É≥„Éà„ÇíÊäïÁ®ø
            if (context.issue && context.issue.number) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üß™ E2E„ÉÜ„Çπ„ÉàÁµêÊûú\n\n${overallStatus}\n\n### „Éñ„É©„Ç¶„Ç∂Âà•ÁµêÊûú:\n${results}\n\n- ÂÆüË°åÊôÇÂàª: ${new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}`
              });
            } else {
              console.log('This is not a pull request, skipping comment creation');
              console.log('E2E test results:', overallStatus);
              console.log('Browser results:', results);
            }

  deploy-preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: test
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://user:password@localhost:5432/dummy_db

      - name: Comment build status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '‚úÖ „Éì„É´„ÉâÊàêÂäü' : '‚ùå „Éì„É´„ÉâÂ§±Êïó';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üöÄ „Éì„É´„ÉâÁµêÊûú\n\n${status}\n\n- Node.js: 18\n- ÂÆüË°åÊôÇÂàª: ${new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}`
            });
