version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: phonica-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: phonica_user
      POSTGRES_PASSWORD: phonica_password
      POSTGRES_DB: phonica_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U phonica_user -d phonica_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    container_name: phonica-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: phonica-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://phonica_user:phonica_password@postgres:5432/phonica_db
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
    volumes:
      - ./public/uploads:/app/public/uploads
      - temp_uploads:/tmp/phonica-uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        npx prisma migrate deploy &&
        node server.js
      "

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: phonica-worker
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://phonica_user:phonica_password@postgres:5432/phonica_db
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
    volumes:
      - ./public/uploads:/app/public/uploads
      - temp_uploads:/tmp/phonica-uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data: {}
  temp_uploads: {} 
