---
description: 
globs: 
alwaysApply: true
---
---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
<!-- このテンプレート変数はユーザーの入力プロンプトに自動置換されます -->
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
    <タスク分析>
    - @tasks.md には、対応しなければならない開発タスクが優先度別に一覧として列挙されています。ユーザが優先度の高いタスクを実行するように指示した場合は、このタスク一覧を参照したうえで、タスクを選択してください
    - 主要なタスクを簡潔に要約してください。
    - 記載された各種ドキュメントを確認し、その制約内での実装方法を検討してください。 
        **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください。**
    - 重要な要件と制約を特定してください。
    - 潜在的な課題をリストアップしてください。
    - タスク実行のための具体的なステップを詳細に列挙してください。
    - それらのステップの最適な実行順序を決定してください。

    ### 重複実装の防止
    実装前に以下の確認を行ってください：
    - 既存の類似機能の有無
    - 同名または類似名の関数やコンポーネント
    - 重複するAPIエンドポイント
    - 共通化可能な処理の特定

    このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
    </タスク分析>

---

2. タスクの実行
   - 特定したステップを一つずつ実行してください。
   - 各ステップの完了後、簡潔に進捗を報告してください。
   - 実装時は以下の点に注意してください：
     - 適切なディレクトリ構造の遵守
     - 命名規則の一貫性維持
     - 共通処理の適切な配置

---

3. 品質管理と問題対応
   - 各タスクの実行結果を迅速に検証してください。
   - エラーや不整合が発生した場合は、以下のプロセスで対応してください：
     a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析
   
   - 検証結果は以下の形式で記録してください：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

---

4. テストについて
    - TDD を実施してください。コードを生成するときは、それに対応するユニットテストを常に生成してください。コードを追加で修正したとき、`npm test` がパスすることを常に確認してください
     ```ts
     function add(a: number, b: number) { return a + b }
     test("1+2=3", () => {
     expect(add(1, 2)).toBe(3);
     });
     ```
    - テストカバレッジ100%を目指します。`*.ts` に対して、`*.test.ts` でユニットテストを書いてください
    - test.ts がない実装に対して、他のテストを参考にテストコードを追加してください
      1. `npm test` を実行して、現在のカバレッジを取得
      2. 今の状態から最もカバレッジが上がるテストコードを考察してから追加
      3. 再度カバレッジを計測して、数値が向上していることを確認
      4. ユーザが満足するまで、テスト生成を繰り返してください


5. 最終確認
   - すべてのタスクが完了したら、成果物全体を評価してください。
   - 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
   - 実装した機能に重複がないことを最終確認してください。

---

6. 結果報告
   以下のフォーマットで最終的な結果を報告してください：
   ```markdown
   # 実行結果報告

   ## 概要
   [全体の要約を簡潔に記述]

   ## 実行ステップ
   1. [ステップ1の説明と結果]
   2. [ステップ2の説明と結果]
   ...

   ## 最終成果物
   [成果物の詳細や、該当する場合はリンクなど]

   ## 課題対応（該当する場合）
   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案
   - [気づいた点や改善提案があれば記述]
   ```

---

7. ユーザへの動作確認依頼
   ここまで完了したら、ユーザに動作確認の依頼をしてください。以下のフォーマットで依頼します。

   ```markdown
   # 動作確認依頼

   ## [ユーザに確認してほしい操作の表題]
   1. [ユーザに確認してほしい操作をステップを分割して具体的に書く]
   2. [ユーザに確認してほしい操作をステップを分割して具体的に書く]
   ...

   ## ユーザから特にフィードバックを受けたいこと
   [ユーザからのフィードバックを受けたい場合(ログ出力結果の共有依頼、挙動の正常性確認など)があれば書く]

   ```

   `npm run dev` で開発サーバをします。コンパイルエラーが起きず、正しく起動することを確認してください。ユーザから不具合が報告された場合は、コードを修正し不具合を解消するとともに、不具合の内容をユニットテストの新たなエッジケースとして追加してください。その後、「4. テストについて」からステップをやり直します。

8. タスクの解決と情報の更新
   ユーザから実装内容について問題なく、タスクを解決とみなしてよいという許可が得られたら、 [tasks.md](mdc:docs/tasks.md) の当該タスクを完了済みとしてマークします


## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UXデザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（APIやフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。

---

## 課題管理について

### 課題として認識するべき項目

以下を、開発上の解決すべき課題として認識すること

- テストカバレッジが 100% を下回っている
- テストの実行に成功しないため、テストケースをスキップした
- `npm run dev` 時にコンパイルエラーが発生している
- `eslint-disable-next-line` で linter error を抑制している
- `@ts-ignore` で型エラーを抑制している
- 実装を優先した結果、低品質なコードである状態が判明している
- その他、コードを読んだ上で対応が必要であると判断されたこと

### 課題の解決

ユーザーが課題を解決するように指示した場合は、 指示に沿って @issues.md に記載されている未解決の項目を解決すること。解決フローは前述のタスク処理フローと同一。

---

## タスク終了前に実行すること

### 課題の記録と更新

- 開発上の解決すべき判断された課題を @issues.md に記録する
- 記載されているタスクを確認し、解決されていることが確認されている場合は `対応済み` のカラムを `true` に変更する
- `対応優先度` を精査し、課題に対して適切な対応優先度が割り振られていないと判断された場合は値を更新する


---

## 関連ドキュメント

---

### 技術スタック

[technology_stack.md](mdc:docs/technology_stack.md)

---

### ディレクトリ構成

[directorystructure.md](mdc:docs/directorystructure.md)

---

### データベース定義

[database_definition.md](mdc:docs/database_definition.md)

---

### 要件定義書

[requirements_definition.md](mdc:docs/requirements_definition.md)

---

### 画面仕様書

[user_interface_specifications.md](mdc:docs/user_interface_specifications.md)

以上の指示に従い、確実で質の高い実装を行います。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。
