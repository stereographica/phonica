/* eslint-disable @typescript-eslint/no-require-imports */
// This script creates a test JPEG with GPS EXIF data for E2E tests
const fs = require('fs');
const path = require('path');

// Simple JPEG with minimal structure and GPS EXIF data
// This is a 1x1 pixel red JPEG with GPS coordinates for Tokyo Station
const jpegWithGPS = Buffer.from([
  // JPEG SOI marker
  0xff,
  0xd8,

  // APP1 marker for EXIF
  0xff,
  0xe1,
  // APP1 length (big-endian)
  0x00,
  0x8a,
  // EXIF header
  0x45,
  0x78,
  0x69,
  0x66,
  0x00,
  0x00,

  // TIFF header
  0x4d,
  0x4d, // Big-endian
  0x00,
  0x2a, // TIFF magic number
  0x00,
  0x00,
  0x00,
  0x08, // IFD offset

  // IFD0
  0x00,
  0x01, // Number of entries

  // GPS IFD Pointer
  0x88,
  0x25, // Tag
  0x00,
  0x04, // Type: LONG
  0x00,
  0x00,
  0x00,
  0x01, // Count
  0x00,
  0x00,
  0x00,
  0x26, // GPS IFD offset

  // Next IFD offset
  0x00,
  0x00,
  0x00,
  0x00,

  // GPS IFD
  0x00,
  0x04, // Number of entries

  // GPSLatitudeRef
  0x00,
  0x01, // Tag
  0x00,
  0x02, // Type: ASCII
  0x00,
  0x00,
  0x00,
  0x02, // Count
  0x4e,
  0x00,
  0x00,
  0x00, // 'N' + padding

  // GPSLatitude
  0x00,
  0x02, // Tag
  0x00,
  0x05, // Type: RATIONAL
  0x00,
  0x00,
  0x00,
  0x03, // Count
  0x00,
  0x00,
  0x00,
  0x6e, // Offset to values

  // GPSLongitudeRef
  0x00,
  0x03, // Tag
  0x00,
  0x02, // Type: ASCII
  0x00,
  0x00,
  0x00,
  0x02, // Count
  0x45,
  0x00,
  0x00,
  0x00, // 'E' + padding

  // GPSLongitude
  0x00,
  0x04, // Tag
  0x00,
  0x05, // Type: RATIONAL
  0x00,
  0x00,
  0x00,
  0x03, // Count
  0x00,
  0x00,
  0x00,
  0x86, // Offset to values

  // Next IFD offset
  0x00,
  0x00,
  0x00,
  0x00,

  // GPS Latitude values (35.681236 = 35° 40' 52.45")
  0x00,
  0x00,
  0x00,
  0x23,
  0x00,
  0x00,
  0x00,
  0x01, // 35/1
  0x00,
  0x00,
  0x00,
  0x28,
  0x00,
  0x00,
  0x00,
  0x01, // 40/1
  0x00,
  0x00,
  0x14,
  0x65,
  0x00,
  0x00,
  0x00,
  0x64, // 5221/100 ≈ 52.21

  // GPS Longitude values (139.767125 = 139° 46' 1.65")
  0x00,
  0x00,
  0x00,
  0x8b,
  0x00,
  0x00,
  0x00,
  0x01, // 139/1
  0x00,
  0x00,
  0x00,
  0x2e,
  0x00,
  0x00,
  0x00,
  0x01, // 46/1
  0x00,
  0x00,
  0x00,
  0xa5,
  0x00,
  0x00,
  0x00,
  0x64, // 165/100 ≈ 1.65

  // JPEG DQT marker (simplified)
  0xff,
  0xdb,
  0x00,
  0x43,
  0x00,
  // 64 bytes of quantization table (simplified)
  ...Array(64).fill(0x10),

  // JPEG SOF marker
  0xff,
  0xc0,
  0x00,
  0x0b,
  0x08, // Precision
  0x00,
  0x01, // Height: 1
  0x00,
  0x01, // Width: 1
  0x01, // Components
  0x01,
  0x11,
  0x00, // Component info

  // JPEG SOS marker
  0xff,
  0xda,
  0x00,
  0x08,
  0x01, // Components
  0x01,
  0x00, // Component info
  0x00,
  0x3f,
  0x00, // Spectral selection

  // Compressed data (minimal)
  0x00,
  0x00,

  // JPEG EOI marker
  0xff,
  0xd9,
]);

// Save the file
const outputPath = path.join(__dirname, 'photo-with-gps.jpg');
fs.writeFileSync(outputPath, jpegWithGPS);

console.log(`Created test photo with GPS data at: ${outputPath}`);
console.log('GPS coordinates: 35.681236, 139.767125 (Tokyo Station)');
